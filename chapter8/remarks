###ini 配置文件 [urls ] 部分的配置格式 ：

​	"url=拦截器[参数]，过滤器[参数]" ，即如果当前请求的 url 匹配[urls]部分的某个 url 模式，将会执行其配置的过滤器。 
​	比如 anon 过滤器表示匿名访问（即不需要登录即可访问）；authc 过滤器表示需要身份认证通过后才能访问；roles[admin] 过滤器表示需要有 admin 角色授权才能访问；而 perms["user:create"] 过滤器表示需要	有 "user:create" 权限才能访问。 



###url  模式使用 Ant 风格模式：

​	Ant 路径通配符支持 ?、\*、\*\*，注意通配符匹配不包括目录分隔符“/”：
​	?：匹配一个字符，如 /admin? 将匹配 /admin1，但不匹配 /admin 或 /admin2；
​	\*：匹配零个或多个字符串，如 /admin\* 将匹配 /admin、/admin123，但不匹配 /admin/1；
​	\*\*：匹配路径中的零个或多个路径，如 /admin/\*\*将匹配 /admin/a 或 /admin/a/b。 



###url 模式匹配顺序 ：

​	url 模式匹配顺序是按照在配置中的声明顺序匹配，即从头开始使用第一个匹配的 url 模式对应的过滤器链。如： 

```ini
	/bb/**=filter1
	/bb/aa=filter2
	/**=filter3
```

​	如果请求的 url 是 "/bb/aa"，因为按照声明顺序进行匹配，那么将使用 filter1 进行拦截。 



###过滤器：

​		![](https://upload-images.jianshu.io/upload_images/5200008-062d3cbeee7dd07e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

1. **NameableFilter** ， 给 Filter 起个名字，如 authc，当我们组装过滤器链时会根据这个名字找到相应的过滤器实例，如果没有设置默认就是 FilterName； 

2. **OncePerRequestFilter** ，用于防止多次执行 Filter 的，也就是说一次请求只会走一次过滤器链，另外提供 enabled 属性，表示是否开启该过滤器实例，默认 enabled=true 表示开启，如果不想让某个过滤器工作，可以设置为 false 即可 ；

3. **ShiroFilter**，整个 Shiro 的入口点，用于拦截需要安全控制的请求进行处理 ；

4. **AdviceFilter** ，提供了 AOP 风格的支持，类似于 SpringMVC 中的 Interceptor ，

   ```java
   boolean preHandle(ServletRequest request, ServletResponse response) throws Exception
   void postHandle(ServletRequest request, ServletResponse response) throws Exception
   void afterCompletion(ServletRequest request, ServletResponse response, Exception exception)
   throws Exception; 
   ```
   
   **preHandler**：类似于 AOP 中的前置增强，在过滤器链执行之前执行，如果返回 true 则继续过滤器链，否则中断后续的过滤器链的执行直接返回，进行预处理（如基于表单的身份验证、授权）
   **postHandle**：类似于 AOP 中的后置返回增强，在过滤器链执行完成后执行，进行后处理（如记录执行时间之类的）；
   **afterCompletion**：类似于 AOP 中的后置最终增强，即不管有没有异常都会执行；可以进行清理资源（如接触 Subject 与线程的绑定之类的）； 
   
5. **PathMatchingFilter** ，提供了基于 Ant 风格的请求路径匹配功能及过滤器参数解析的功能，如 "roles[admin,user]" 自动根据 "，"分割解析到一个路径参数配置并绑定到相应的路径 ，

   ```java
   boolean pathsMatch(String path, ServletRequest request)
   boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue)
   throws Exception 
   ```

   **pathsMatch**：该方法用于 path 与请求路径进行匹配的方法，如果匹配返回 true；
   **onPreHandle**：在 preHandle 中，当 pathsMatch 匹配一个路径后，会调用 opPreHandler 方法并将路径绑定参数配置传给 mappedValue，然后可以在这个方法中进行一些验证（如角色授权），如果验证失败可以返回 false 中断流程，默认返回 true，也就是说子类可以只实现 onPreHandle 即可，无须实现 preHandle。如果没有 path 与请求路径匹配，默认是通过的（即preHandle 返回 true）。 

6. **AccessControlFilter** ，提供了访问控制的基础功能；比如是否允许访问/当访问拒绝时如何处理等 ，

   ```java
   abstract boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception;
   boolean onAccessDenied(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception;
   abstract boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception;     
   ```
   
   **isAccessAllowed**：表示是否允许访问，mappedValue 就是 [urls] 配置中过滤器参数部分，如果允许访问返回 true，否则 false；
**onAccessDenied**：表示当访问拒绝时是否已经处理了，如果返回 true 表示需要继续处理，如果返回 false 表示该过滤器实例已经处理了，将直接返回即可。
   
   **onPreHandle** 会自动调用这两个方法决定是否继续处理：  
   
   ```java
   boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue)throws Exception {
   	return isAccessAllowed(request, response, mappedValue) || onAccessDenied(request, response, mappedValue);
   }
   ```
   
   另外 AccessControlFilter 还提供了如下方法用于处理如登录成功后/重定向到上一个请求： 
   
   ```java
   void setLoginUrl(String loginUrl) //身份验证时使用，默认/login.jsp
   String getLoginUrl()
   Subject getSubject(ServletRequest request, ServletResponse response) //获取 Subject 实例
   boolean isLoginRequest(ServletRequest request, ServletResponse response) //当前请求是否是登录请求
   void saveRequestAndRedirectToLogin(ServletRequest request, ServletResponse response)throws IOException //将当前请求保存起来并重定向到登录页面
   void saveRequest(ServletRequest request) //将请求保存起来，如登录成功后再重定向回该请求 
   void redirectToLogin(ServletRequest request, ServletResponse response) //重定向到登录页面
       
   ```
   
###默认过滤器

   	Shiro 内置了很多默认的过滤器，比如身份验证、授权等相关的。默认过滤器可以参考 org.apache.shiro.web.filter.mgt.DefaultFilter 中的枚举过滤器，这些默认的拦截器会自动注册，可以直接在 ini 配置文件中通过“拦截器名.属性”设置其属性 ，另外如果某个拦截器不想使用了可以直接通过如下配置直接禁用： “拦截器名.enable = false”。

- **authc（org.apache.shiro.web.filter.authc.FormAuthenticationFilter）**，说明（括号里的表示默认值）：
  - 基于表单的过滤器；如“/\*\*=authc”，如果没有登录会跳到相应的登录页面登录；
  - 主要属性：
    usernameParam：表单提交的用户名参数名（ username ） ；
    passwordParam：表单提交的密码参数名（password）； 
    rememberMeParam：表单提交的密码参数名（rememberMe）；
    loginUrl：登录页面地址（/login.jsp）；
    successUrl：登录成功后的默认重定向地址； 
    failureKeyAttribute：登录失败后错误信息存储 key（shiroLoginFailure）；
- **authcBasic（org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter )**，说明：
    - Basic HTTP 身份验证过滤器，主要属性：
      applicationName：弹出登录框显示的信息（application）； 
- **logout（org.apache.shiro.web.filter.authc.LogoutFilter ）**
  - 退出过滤器，主要属性：  
    redirectUrl：退出 成 功 后 重 定 向 的 地 址 （ / ） ; 示 例“/logout=logout” 
- **user （org.apache.shiro.web.filter.authc.UserFilter ）**，
  - 用户过滤器，用户已经身份验证/记住我登录的都可；示例“/\*\*=user” 
- **anon（org.apache.shiro.web.filter.authc.AnonymousFilter）**,
  - 匿名过滤器，即不需要登录即可访问，一般 用 于 静 态 资 源 过 滤，示 例“/static/\*\*=anon” 。
- **roles（org.apache.shiro.web.filter.authz.RolesAuthorizationFilter）**
  - 角色授权拦截器，验证用户是否拥有所有角色； 
  - 主要属性： 
    loginUrl：登录页面地址（/login.jsp）； 
    unauthorizedUrl：未授权后重定向的地址 ； 示 例“/admin/\*\*=roles[admin]”。
- **perms （org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter）**
  - 权限授权拦截器，验证用户是否拥有所有权限，属性和 roles 一样，示例 “/user/\*\*=perms["user:create"]”
- **port（org.apache.shiro.web.filter.authz.PortFilter）**
  - 端口拦截器,
  - 主要属性： 
    port（80）：可以通过的端口；示例 “/test = port[80]”，如果用户访问该页面是非 80，将自动将
请求端口改为 80 并重定向到该 80 端口，其他路径/参数等都一样。

- **ssl（org.apache.shiro.web.filter.authz.SslFilter）**
  - SSL 拦截器，只有请求协议是 https 才能通过；否则自动跳转会 https 端口（443）；其他和 port拦截器一样；


###过滤器链
​		Shiro 内部提供了一个路径匹配的 FilterChainResolver 实 现 ：PathMatchingFilterChainResolver，其根据 [urls] 中配置的 url 模式（默认 Ant 风格）= 拦截器链和请求的 url 是否匹配来解析得到配置的拦截器链的；而 PathMatchingFilterChainResolver 内部通过 FilterChainManager 维护着拦截器链，比如 DefaultFilterChainManager 实现维护着 url 模式与拦截器链的关系。因此我们可以通过 FilterChainManager 进行动态动态增加 url 模式与拦截器链的关系。

​		DefaultFilterChainManager 会默认添加 org.apache.shiro.web.filter.mgt.DefaultFilter 中声明的拦截器，如果要注册自定义拦截器，IniSecurityManagerFactory/WebIniSecurityManagerFactory 在启动时会自动扫描 ini 配置文件 中的 [filters]/[main] 部分并注册这些拦截器到 DefaultFilterChainManager；且创建相应的 url 模式与其拦截器关系链。