Shiro 对权限字符串缺失部分的处理：

如 “user:view” 等价于 “user:view:\*”；而 “organization” 等价于 “organization:\*” 或者 “organization:\*:\*”。可以这么理解，这种方式实现了前缀匹配。
另外如“user:\*”可以匹配如 “user:delete”、“user:delete” 可以匹配如“user:delete:1”、“user:\*:1”可以匹配如“user:view:1”、“user”可以匹配“user:view”或“user:view:1”
等 。

即 \* 可 以匹配所有，不加 \* 可 以 进行前缀匹 配；但是如 “\*:view” 不能匹配 “system:user:view”，需要使用 “\*:\*:view”，即后缀匹配必须指定前缀（多个冒号就需要
多个 \* 来匹配）。 



权限检查流程如下：

1. 首先调用 Subject.isPermitted*/hasRole*接口，其会委托给 SecurityManager，而SecurityManager 接着会委托给 Authorizer；

2. Authorizer 是真正的授权者，如果我们调用如 isPermitted(“user:view”)，其首先会通过 PermissionResolver 把字符串转换成相应的 Permission 实例；

3. 在进行授权之前，其会调用相应的 Realm 获取 Subject 相应的角色/权限用于匹配传入的角色/权限；

4. Authorizer 会判断 Realm 的角色/权限是否和传入的匹配，如果有多个 Realm，会委托给 ModularRealmAuthorizer 进行循环判断，如果匹配如 isPermitted*/hasRole 会返回 true，否则返回 false 表示授权失败。

   

ModularRealmAuthorizer 进行多 Realm 匹配流程：
1. 首先检查相应的 Realm 是否实现了 Authorizer；

2. 如果实现了 Authorizer，那么接着调用其相应的 isPermitted*/hasRole* 接口进行匹配；

3. 如果有一个 Realm 匹配那么将返回 true，否则返回 false。

   

如果 Realm 进行授权的话，应该继承 AuthorizingRealm，其流程是：
1. 如果调用 hasRole*，则直接获取 AuthorizationInfo.getRoles()与传入的角色比较即可；
2. 首先如果调用如 isPermitted(“user:view”)    
    1. 首先通过AuthorizationInfo. getStringPermissions()得到字符串集合；    
    2. 通过 PermissionResolver 将字符串解析为 Permission 实例，默认使用 WildcardPermissionResolver，即转换为通配符的 WildcardPermission；    
    3. 然后获取用户的角色，并通过 RolePermissionResolver 解析角色对应的权限集合（默认没有实现，可以自己提供）；    
    4. 接着调用 Permission.implies(Permission p)逐个与传入的权限比较，如果有匹配的则返回 true，否则 false。



以 AuthorizerTest 类中 testIsPermitted() 方法为例子：

1. 配置文件，shiro-authorizer.ini：

   ```ini
   authorizer=org.apache.shiro.authz.ModularRealmAuthorizer  #默认
   permissionResolver=chapter3.permission.BitAndWildPermissionResolver #自定义
   authorizer.permissionResolver=$permissionResolver
   rolePermissionResolverrolePermissionResolver=chapter3.permission.MyRolePermissionResolver  #自定义
   authorizer.rolePermissionResolver=$rolePermissionResolver
   securityManager.authorizer=$authorizer  #自定义
   realm=chapter3.realm.MyRealm  #自定义
   securityManager.realms=$realm
   ```

2. 方法调用流程(只限于自定义类)：

   1. 执行 login("classpath:shiro-jdbc-authorizer.ini", "zhang", "123")，执行到 login(...) 方法中的 subject.login(token) 时，调用 MyRealm 的 doGetAuthenticationInfo(..) 方法进行身份认证；
   2. 身份验证成功，执行 subject().isPermitted("user1:update")，调用 BitAndWildPermissionResolver 的 resolvePermission(String permissionString) 方法将传入的 “user1:update” 解析为 Permission 实例，使用默认的 WildcardPermission 类进行解析；
   3. 调用 MyRealm 中的 doGetAuthorizationInfo(..) 进行授权(添加角色、权限)，如果添加的是 Permission 字符串，还会调用 BitAndWildPermissionResolver 的 resolvePermission(String permissionString) 方法解析成 Permission 实例，另外还会调用 MyRolePermissionResolver 的 resolvePermissionsInRole(...) 方法根据角色字符串获取 Permission 实例集合。这样登录用户拥有的权限集合就解析出来了。
   4. 最后调用 implies(..) 方法（Permission 接口的实现类中的实现）逐个与传入的匹配，有匹配的就返回 true，否则返回 false。